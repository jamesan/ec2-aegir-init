#!/bin/sh
#
#   11-setup-system
#   Configure basic server setup for an EC2 instance launched from a base
#   Arch Linux AMI. Part of the prov-ec2 script series.
#
#   Copyright (c) 2015 James An <james@jamesan.ca>
#
#   This program is free software: you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation, either version 3 of the License, or
#   (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this program.  If not, see <http://www.gnu.org/licenses/>.

source /usr/local/bin/utility-library
tempfile=$(mktemp)

main() {
  _msg 'Securing remote access...'

  _msg2 'Setting up user skeleton directory with GnuPG and SSH...'
  truncate --size=0 "$tempfile"
  install --mode=644 -D   /usr/share/doc/gnupg/examples/gpgconf.conf /etc/gnupg/gpgconf.conf
  install --mode=700 --directory /etc/skel/.gnupg
  install --mode=700 --directory /etc/skel/.ssh
  install --mode=600 -D   /usr/share/gnupg/gpg-conf.skel /etc/skel/.gnupg/gpg.conf
  install --mode=600 "$tempfile" /etc/skel/.gnupg/gpg-agent.conf
  install --mode=600 "$tempfile" /etc/skel/.gnupg/pubring.gpg
  install --mode=600 "$tempfile" /etc/skel/.gnupg/secring.gpg
  install --mode=600 "$tempfile" /etc/skel/.ssh/authorized_keys
  install --mode=600 "$tempfile" /etc/skel/.ssh/known_hosts

  _msg2 'Creating remote-accessible non-root user...'
  echo 'cloud-user ALL=(ALL) NOPASSWD: ALL' >| $tempfile
  [ -z $(getent passwd cloud-user) ] && {
    useradd --create-home --no-user-group --gid users cloud-user
  }
  install --mode=600 -D --owner=cloud-user --group=users /root/.ssh/authorized_keys ~cloud-user/.ssh/authorized_keys
  install --mode=440 $tempfile /etc/sudoers.d/cloud-user

  _msg2 'Securing and enabling SSH daemon...'
  [ -d /root/.ssh ] && {
    rm --force --recursive /root/.ssh
  }
  declare -A SSH_OPTS=(
    [LoginGraceTime]=30s
    [PermitRootLogin]=no
    [MaxAuthTries]=3
    [MaxSessions]=5
    [UseDNS]=no
    [PasswordAuthentication]=no
  )
  for SSH_OPT in "${!SSH_OPTS[@]}"; do
    declare SSH_VAL=${SSH_OPTS[$SSH_OPT]}
    sed --regexp-extended --in-place "s/^#($SSH_OPT) .*$/\1 $SSH_VAL/" /etc/ssh/sshd_config
  done
  systemctl enable --now sshd

  _msg2 'Setting systemd options...'
  hostnamectl set-chassis server
  hostnamectl set-deployment development
  timedatectl set-timezone America/Toronto
  timedatectl set-ntp FALSE
  # These commands are executed through a user-data script.
  #~ hostnamectl set-hostname $(curl http://169.254.169.254/latest/meta-data/public-hostname)
  #~ hostnamectl set-location 'AWS: us-east-1a'

  _msg 'Upgrading and installing system packages...'

  _msg2 'Installing missing base and base-devel packages and remove multilib gcc...'
  echo -e '\n\ny\ny\n' | pacman --sync --refresh --sysupgrade --needed --ignore linux base base-devel 

  _msg2 'Re-creating pacman keyring...'
  rm -rf /etc/pacman.d/gnupg
  pacman --noconfirm --sync --needed haveged && systemctl start haveged
  pacman-key --init
  systemctl stop haveged && pacman --noconfirm --remove --nosave haveged
  pacman-key --populate archlinux
  pacman-key --refresh-keys

  _msg2 'Adding and trusting public GPG key for James An <james@jamesan.ca> and Steven Noonan <steven@uplinklabs.net>'
  pacman-key --recv-key 001BED01 A7B30DB9
  pacman-key --lsign-key 001BED01 A7B30DB9

  _msg2 'Installing additional system utilities, removing all 32-bit packages...'
  yes | pacman --sync --needed bash-completion byobu gcc gcc-libs git jq libpwquality mlocate moreutils rsync unzip wget zip
  pacman --query --quiet --search 32 | xargs pacman --noconfirm --remove --nosave --recursive linux

  _msg 'Set up complete!'
}

# invoke main function if this script is executed as a command
if [ "$CMD" = ${BASH_SOURCE##*/} ]; then
  main "$@"
else
  unset main
fi
